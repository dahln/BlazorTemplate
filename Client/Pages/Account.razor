@page "/account"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation

@inject NavigationManager _navigationManager
@inject BlazorTemplate.Client.Services.API API
@inject IModalService _modalService
@inject IToastService _toastService
@inject SpinnerService _spinnerService
@inject Common.Configuration Configuration

@attribute [Authorize]

<AuthorizeView>
    <Authorized>

        <div class="row mt-5">
            <div class="col-lg-4">
                <div class="row">
                    <div class="col-lg-12">
                        <h3>Account Settings</h3>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-lg-12">
                        <h5>Change Email</h5>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <label>Current Email: @context.User.Identity.Name</label>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-lg-12">
                        <input type="text" class="form-control" @bind="NewEmail" />
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-lg-12">
                        <input type="button" class="btn btn-primary float-end " value="Save Email" @onclick="ChangeEmail" />
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-lg-12">
                        <h5>Change Password</h5>
                        <input type="password" class="form-control" @bind="NewPassword" placeholder="New Password" />
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-lg-12">
                        <input type="password" class="form-control" @bind="ConfirmPassword" placeholder="Confirm Password"/>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-lg-12">
                        <input type="button" class="btn btn-primary float-end" value="Save Password" @onclick="ChangePassword" />
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-lg-12">
                        <h5>Delete Account</h5>
                        <input type="button" class="btn btn-danger" value="Delete Account" @onclick="DeleteAccount" />
                    </div>
                </div>
            </div>
        </div>


        
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {

    public string NewEmail { get; set; }
    public string NewPassword { get; set; }
    public string ConfirmPassword { get; set; }

    async public Task ChangeEmail()
    {
        var modal = _modalService.Show<ConfirmDialog>("Please confirm you want to change your email");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            Common.ChangeEmail content = new Common.ChangeEmail() { NewEmail = NewEmail };
            var response = await API.AccountChangeEmail(content);
            if(response)
            {
                _toastService.ShowSuccess("Done. Sign in with the new email");
            }
        }
    }

    async public Task ChangePassword()
    {
        var modal = _modalService.Show<ConfirmDialog>("Please confirm you want to change your password");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            Common.ChangePassword content = new Common.ChangePassword() { NewPassword = NewPassword, ConfirmPassword = ConfirmPassword };
            var response = await API.AccountChangePassword(content);
            if(response)
            {
                _toastService.ShowSuccess("Done. Use your new password with next sign in");
            }
        }
    }

    async public Task DeleteAccount()
    {
        var modal = _modalService.Show<ConfirmDialog>("Please confirm you want to delete your account. This cannot be undone.");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            await API.AccountDeleteUser();

            var authority = Configuration.Authority;
            var clientId = Configuration.ClientId;

            Navigation.NavigateTo($"{authority}/v2/logout?client_id={clientId}&returnTo={Navigation.BaseUri}logout");
        }
    }

}