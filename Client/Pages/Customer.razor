@page "/customer"
@page "/customer/{id}"

@using BlazorTemplate.Common.Enumerations

@inject NavigationManager _navigationManager
@inject BlazorTemplate.Client.Services.API API
@inject IModalService _modalService
@inject IToastService _toastService
@inject SpinnerService _spinnerService
@inject IJSRuntime JSRuntime

<div class="mb-3">
    <NavLink href="@($"customers")">
        &#171; Back to Search
    </NavLink>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>
            Customer @if (Locked == true)
            {<span class="btn btn-link" @onclick="ToggleEditing">Edit</span>}
        </h3>
    </div>
</div>

<fieldset disabled="@Locked">
    <div class="row">
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-6 text-center">
                    <div class="row">
                        <div class="col-md-12">
                            @if (string.IsNullOrEmpty(customer.ImageBase64))
                            {
                                <i class="far fa-user fa-7x business-logo-placeholder mt-md-5 mb-2"></i>
                            }
                            else
                            {
                                <img src="@customer.ImageBase64" class="w-100 mb-2" />
                            }
                        </div>
                    </div>
                    @if (!Locked)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <label class="btn btn-outline-primary w-100">
                                    <InputFile OnChange="OnInputFileChange" style="display:none;" accept="image/*" />Upload File (32mb size limit)
                                </label>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(customer.ImageBase64))
                        {
                            <div class="row">
                                <div class="col-md-12">
                                    <input type="button" value="Remove Image" class="btn btn-outline-danger w-100" @onclick="RemoveFile" />
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="col-md-6">
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" @bind="customer.Name" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-lg-12">
                            <label class="form-label">Birth Date</label>
                            <input type="date" class="form-control" @bind="customer.BirthDate" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label class="form-label">Gender</label>
                            <select class="form-select" @bind="customer.Gender">
                                <option value="@Gender.NotSpecified">@Gender.NotSpecified.GetDescription()</option>
                                <option value="@Gender.Male">@Gender.Male.GetDescription()</option>
                                <option value="@Gender.Female">@Gender.Female.GetDescription()</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label>Active</label>
                            <input type="checkbox" @bind="customer.Active" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">Email</label>
                    <input type="text" class="form-control" @bind="customer.Email" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Phone</label>
                    <input type="text" class="form-control" @bind="customer.Phone" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-12">
                    <label class="form-label">Address</label>
                    <input type="text" class="form-control" @bind="customer.Address" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">City</label>
                    <input type="text" class="form-control" @bind="customer.City" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">State</label>
                    <input type="text" class="form-control" @bind="customer.State" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Postal</label>
                    <input type="text" class="form-control" @bind="customer.Postal" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-12">
                    <label class="form-label">Notes</label>
                    <textarea class="form-control" rows="7" @bind="customer.Notes"></textarea>
                </div>
            </div>
        </div>
    </div>

</fieldset>

<div class="row">
    <div class="col-md-12">
        <hr />
    </div>
</div>

@if (Locked == false)
{
<div class="row">
    <div class="col-md-6">
        @if (!string.IsNullOrEmpty(Id))
        {
            <button class="btn btn-warning btn-customer" @onclick="Delete"><i class="far fa-trash-alt me-1"></i>Delete</button>
        }
    </div>
    <div class="col-md-6">
        <button class="btn btn-primary btn-customer float-end" @onclick="Save"><i class="far fa-save me-1"></i>Save</button>
        @if (!string.IsNullOrEmpty(Id))
        {
            <button class="btn btn-outline-dark btn-customer float-end me-lg-2 me-md-2" @onclick="CancelChanges"><i class="fas fa-times me-1"></i>Cancel Changes</button>
        }
    </div>
</div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private BlazorTemplate.Common.Customer customer = new BlazorTemplate.Common.Customer();
    private bool Locked { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            Locked = true;
            customer = await API.CustomerGetById(Id);
        }
        else
        {
            Locked = false;
        }
    }

    private void ToggleEditing()
    {
        Locked = false;
    }

    async private Task Save()
    {
        if (string.IsNullOrEmpty(Id))
        {
            var responseId = await API.CustomerCreate(customer);
            if (responseId != null)
                _navigationManager.NavigateTo($"customer/{responseId}");
        }
        else if (!string.IsNullOrEmpty(Id))
        {
            var response = await API.CustomerUpdateById(customer, Id);
            if (response != null)
            {
                Locked = true;
            }
        }
    }

    async private Task Delete()
    {
        var modal = _modalService.Show<ConfirmDialog>("Are you sure you want to delete this customer?");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            await API.CustomerDeleteById(Id);
            _navigationManager.NavigateTo($"customers");
        }
    }

    async private Task CancelChanges()
    {
        Locked = true;
        customer = await API.CustomerGetById(Id);
    }

    //Reading image bytes in browser may not be optimal in all situations. Adjust as needed.
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var format = e.File.ContentType;
        long maxAllowedSize = 33_554_432;

        if (e.File.Size > maxAllowedSize)
        {
            _toastService.ShowError("Selected file is to big. Please choose file less than 32mb");
            return;
        }

        //If gif images will be uploaded, do not do this call - it will remove the animation
        var resizedImageFile = await e.File.RequestImageFileAsync(format, 500, 500);

        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream(maxAllowedSize).ReadAsync(buffer);
        var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

        customer.ImageBase64 = imageDataUrl;
    }

    private void RemoveFile()
    {
        customer.ImageBase64 = null;
    }

}