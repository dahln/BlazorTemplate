@page "/account"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QRCoder
@using BlazorTemplate.Common

@inject NavigationManager Navigation

@inject NavigationManager _navigationManager
@inject BlazorTemplate.App.Services.API API
@inject IModalService _modalService
@inject IToastService _toastService
@inject SpinnerService _spinnerService

@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <div>
            <div class="row">
                <div class="col-md-12">
                    <h3>Account Settings</h3>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-md-4 mt-2">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <h5>Change Email</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-12">
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label>Current Email: @(CurrentEmail = context.User.Identity.Name)</label>
                                        </div>
                                    </div>
                                    <fieldset disabled="@Disabled">
                                        <div class="row mt-3">
                                            <div class="col-md-12">
                                                <input type="text" class="form-control" @bind="NewEmail" autocomplete="off" />
                                            </div>
                                        </div>
                                        <div class="row mt-2">
                                            <div class="col-md-12">
                                                <input type="button" class="btn btn-primary float-end " value="Save Email" @onclick="ChangeEmail" />
                                            </div>
                                        </div>
                                    </fieldset>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <h5>Change Password</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <input type="password" class="form-control" @bind="OldPassword" placeholder="Old Password" />
                                        </div>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="col-md-12">
                                            <input type="password" class="form-control" @bind="NewPassword" placeholder="New Password"/>
                                        </div>
                                    </div>
                                    <div class="row mt-3">
                                        <div class="col-md-12">
                                            <input type="password" class="form-control" @bind="ConfirmPassword" placeholder="Confirm Password" />
                                        </div>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="col-md-12">
                                            <input type="button" class="btn btn-primary float-end" value="Save Password" @onclick="ChangePassword" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mt-2">
                    <div class="card">
                        <div class="card-header">
                            <h5>Two Factor Authentication</h5>
                        </div>
                        <div class="card-body">
                            
                            
                            @if(TwoFactorEnabled != null && TwoFactorEnabled.Value == true) 
                            {
                                <h5>Two Factor Authentication is <span class="enabled">ENABLED</span></h5>
                                <div class="row mt-2">
                                    <div class="col-md-6">
                                        <input type="button" class="btn btn-danger" value="Disable 2FA" @onclick="Disable2FA" />
                                    </div>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-md-6">
                                        <input type="button" class="btn btn-warning" value="Forget this PC" @onclick="ForgetMachine2FA" />
                                    </div>
                                </div>
                                @if(TwoFactorRecoveryKey.Any())
                                {
                                    <div class="row mt-3 text-center">
                                        <div class="col-md-12">
                                            <p>Print/Save these recovery keys. <br />
                                            You cannot retrieve them after leaving this page:</p>
                                            @foreach(var code in @TwoFactorRecoveryKey)
                                            {
                                                <h6>@(code)</h6>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                            else if(TwoFactorEnabled != null && TwoFactorEnabled.Value == false)
                            {
                                if(TwoFactorSettingUp)
                                {
                                    <p>Use an authenticator app like 'Microsoft Authentication' to setup your 2FA profile.</p>
                                    <div class="text-center">
                                        <h5>Scan this QR</h5>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <img src="@TwoFactorSharedKeyQR" class="qr" />
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <label>--- OR ---</label>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <label>Manually Entered the Key:</label>
                                                <p>@TwoFactorSharedKey</p>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 offset-md-3">
                                                <label>Code from authenticator app:</label>
                                                <input type="text" @bind="TwoFactorValidation" class="form-control w100" />
                                            </div>
                                        </div>
                                        <div class="row mt-2">
                                            <div class="col-md-12">
                                                <input type="button" class="btn btn-primary w100" value="Submit Code & Finish Setup" @onclick="Finish2faSetup" />
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <h5>Two Factor Authentication is <span class="disabled">DISABLED</span></h5>
                                    <div class="row mt-2">
                                        <div class="col-md-2">
                                            <input type="button" class="btn btn-primary " value="Enable 2FA" @onclick="Start2FA" />
                                        </div>
                                    </div>
                                    <p class="mt-3">Use an Authenticator app to get a security code when signing in.</p>
                                    <p><a href="https://www.microsoft.com/en-us/security/mobile-authenticator-app">Microsoft Authenticator App</a></p>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mt-2">
                    <div class="card">
                        <div class="card-header">
                            <h5>Delete Account</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <p>This will delete you account and allow associated information. This operation cannot be undone.</p>
                                    <input type="button" class="btn btn-danger" value="Delete Account" @onclick="DeleteAccount" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {

    public string CurrentEmail { get; set; }
    public string NewEmail { get; set; }
    public string OldPassword { get; set; }
    public string NewPassword { get; set; }
    public string ConfirmPassword { get; set; }
    public bool Disabled { get; set; } = false;
    public bool? TwoFactorEnabled { get; set; }
    public bool TwoFactorSettingUp { get; set; } = false;
    public string TwoFactorSharedKey { get; set; }
    public string TwoFactorSharedKeyQR { get; set; }
    public List<string> TwoFactorRecoveryKey { get; set; } = new List<string>();
    public string TwoFactorValidation { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await API.GetAsync<bool>("api/v1/account/operations", false);
        Disabled = response == false ? true : false;

        TwoFactorEnabled = await API.GetAsync<bool>("api/v1/account/2fa");
    }


    async public Task ChangeEmail()
    {
        var userAlreadyExists = await API.PostAsync<bool>("api/v1/account/exists", new Common.AccountEmail() { Email = NewEmail }, false);
        if(userAlreadyExists == false)
        {
            var options = new ModalOptions() 
            { 
                Position = ModalPosition.Middle,
                Size = ModalSize.ExtraLarge,
                Class = "bg-dark text-white modal-custom modal-size-large",
                OverlayCustomClass = "custom-modal-overlay"
            };

            var modal = _modalService.Show<ConfirmDialog>("Please confirm you want to change your email", options);
            var modalResult = await modal.Result;

            if (modalResult.Cancelled) { }
            else
            {
                var content = new { NewEmail = NewEmail };
                var response = await API.PostAsync<Common.IdentityManageUserResponse>("manage/info", content, true, true);
                if(response != null)
                {
                    _toastService.ShowSuccess("Email changed. An email has been sent to the new email. Your email will not be changed until you confirm the email using the link sent to you.");
                }
            }
        }
        else
        {
            _toastService.ShowError("Email is unavailable");
        }
    }

    async public Task ChangePassword()
    {
        var options = new ModalOptions() 
        { 
            Position = ModalPosition.Middle,
            Size = ModalSize.ExtraLarge,
            Class = "bg-dark text-white modal-custom modal-size-large",
            OverlayCustomClass = "custom-modal-overlay"
        };

        var modal = _modalService.Show<ConfirmDialog>("Please confirm you want to change your password", options);
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            var content = new { OldPassword = OldPassword, NewPassword = NewPassword };
            var response = await API.PostAsync<Common.IdentityManageUserResponse>("manage/info", content, true, true);
            if(response != null)
                _toastService.ShowSuccess("Done. Use your new password with next sign in.");
        }
    }

    async public Task DeleteAccount()
    {
        var options = new ModalOptions() 
        { 
            Position = ModalPosition.Middle,
            Size = ModalSize.ExtraLarge,
            Class = "bg-dark text-white modal-custom modal-size-large",
            OverlayCustomClass = "custom-modal-overlay"
        };
        var modal = _modalService.Show<ConfirmDialog>("Please confirm you want to delete your account. This cannot be undone.", options);
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            var response = await API.DeleteAsync("api/v1/account");
            if(response)
            {
                //The logout component and state change doesn't work well if the 
                //user has been deleted. On an accout deletion, call the logout to 
                //dispose of the cookie and then refresh the application.
                await API.GetAsync("api/v1/account/logout");
                Navigation.NavigateTo("/", true);
            }
            
        }
    }

    async public Task Start2FA()
    {
        var response = await API.PostAsync<IdentityManage2faResponse>("/manage/2fa", new object(), true, true, true);

        TwoFactorSharedKey = response.SharedKey;
        var qrImage = GetQrCodeFor2faSetup(response.SharedKey);
        TwoFactorSharedKeyQR = qrImage;
        TwoFactorSettingUp = true;
    }

    async public Task Finish2faSetup()
    {
        var content = new
        {
            Enable = true,
            TwoFactorCode = TwoFactorValidation
        };
        var response = await API.PostAsync<IdentityManage2faResponse>("/manage/2fa", content, true, true, true);
        await ResetRecoveryCodes2FA();

        TwoFactorEnabled = await API.GetAsync<bool>("api/v1/account/2fa");
    }

    async public Task Disable2FA()
    {
        var content = new
        {
            Enable = false,
            ForgetMachine = true,
            ResetSharedKey = true
        };
        var response = await API.PostAsync<IdentityManage2faResponse>("/manage/2fa", content, true, true, true);
        TwoFactorEnabled = await API.GetAsync<bool>("api/v1/account/2fa");
    }

    async public Task ResetRecoveryCodes2FA()
    {
        var content = new
        {
            ResetRecoveryCodes = true,
        };
        var response = await API.PostAsync<IdentityManage2faResponse>("/manage/2fa", content, true, true, true);
        TwoFactorEnabled = await API.GetAsync<bool>("api/v1/account/2fa");

        if(response.RecoveryCodes.Any())
            TwoFactorRecoveryKey = response.RecoveryCodes.ToList();
    }

    async public Task ForgetMachine2FA()
    {
        var content = new  
        {
            ForgetMachine = true
        };
        var response = await API.PostAsync<IdentityManage2faResponse>("/manage/2fa", content, true, true, true);
        _toastService.ShowSuccess("PC Forgotten.");
    }

    private string GetQrCodeFor2faSetup(string code)
    {
        string authenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

        var qrContent = string.Format(
                            authenticatorUriFormat,
                            "BlazorTemplate",
                            CurrentEmail,
                            code);

        QRCodeGenerator qrGenerator = new QRCodeGenerator();
        QRCodeData qrCodeData = qrGenerator.CreateQrCode(qrContent, QRCodeGenerator.ECCLevel.H);

        PngByteQRCode qrCode = new PngByteQRCode(qrCodeData);
        var qrCodeAsPng = qrCode.GetGraphic(10);
        string QrUri = string.Format("data:image/png;base64,{0}", Convert.ToBase64String(qrCodeAsPng));

        return QrUri;
    }
}


