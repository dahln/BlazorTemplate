@attribute [Authorize(Roles = "Administrator")]
@page "/admin"

@using BlazorTemplate.Common

@inject NavigationManager _navigationManger
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BlazorTemplate.App.Services.API API
@inject IModalService _modalService

@attribute [Authorize]

<div class="row mt-3">
    <div class="col-md-12">
        <h3>Settings</h3>
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <div class="row mt-1">
            <div class="col-md-12">
                <div class="input-group">
                    <span class="input-group-text">
                        SendGrid Key
                    </span>
                    <input type="text" class="form-control" @bind="SystemSettings.SendGridKey" />
                </div>
            </div>
        </div>

        <div class="row mt-1">
            <div class="col-md-12">
                <div class="input-group">
                    <span class="input-group-text">
                        SendGrid System Email
                    </span>
                    <input type="text" class="form-control" @bind="SystemSettings.SendGridSystemEmailAddress" />
                </div>
            </div>
        </div>
        <div class="row mt-1">
            <div class="col-md-12">
                <div class="input-group">
                    <span class="input-group-text">
                        Email Domain Restrictions
                    </span>
                    <input type="text" class="form-control" @bind="SystemSettings.EmailDomainRestriction" />
                </div>
            </div>
        </div>
        <div class="row mt-1">
            <div class="col-md-12">
                <div class="input-group w-100">
                    <span class="input-group-text">
                        Registration Enabled
                    </span>
                    <div class="input-group-text">
                        <input @bind="SystemSettings.RegistrationEnabled" class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                    </div>
                </div>
            </div>
        </div>

        

        <div class="row mt-1">
            <div class="col-md-12">
                <input type="button" @onclick="UpdateSettings" class="btn btn-primary" value="Save Settings" />
            </div>
        </div>
    </div>
</div>

<div class="row mt-5">
    <div class="col-md-12">
        <h3>Users</h3>
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-md-6 offset-md-6">
        <form class="input-group float-end" @onsubmit="(() => SearchUsers(0, false))" autocomplete="off">
            <input type="text" class="form-control" aria-label="Text input with dropdown button" @bind="Search.FilterText" autocomplete="off" />
            <button class="btn btn-outline-secondary" type="submit"><i class="bi bi-search me-2"></i>Search</button>
        </form>
    </div>
</div>
<div class="row mt-1">
    <div class="col-md-12">
        <div class="btn btn-link btn-sm float-end pointer" @onclick="(() => SearchUsers(0, true))">Reset Search</div>
    </div>
</div>
<div class="row">
    <div class="col-md-12 table-responsive">
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <th width="50%" scope="col" @onclick="(() => Sort(nameof(BlazorTemplate.Common.User.Email)))" class="pointer">
                        Email
                        @if (Search.SortBy == nameof(BlazorTemplate.Common.User.Email))
                        {
                            @if (Search.SortDirection == SortDirection.Ascending)
                            {
                                <i class="bi bi-chevron-down"></i>
                            }
                            else if (Search.SortDirection == SortDirection.Descending)
                            {
                                <i class="bi bi-chevron-up"></i>
                            }
                        }
                    </th>
                    <th width="49%">
                        
                    </th>
                    <th width="1%">
                        
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Items)
                {
                    <tr>
                        <td>
                            <h6 class="list-email">@item.Email</h6>
                        </td>
                        <td>
                            <div class="form-check mt-1">
                                <input type="checkbox" class="form-check-input" id="@($"authorized_owner_{@item.Email}")" checked="@(item.IsAdministrator ? "checked" : null )" @onchange="(() => ToggleAdministrator(item))" disabled="item.IsSelf" />
                                <label class="form-check-label" for="@($"authorized_{@item.Email}")">Administrator</label>
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(item)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <nav aria-label="Page navigation example">
            <ul class="pagination float-end">
                @if ((Search.Page + 1) > 1)
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchUsers(Search.Page - 1, false))">Previous</div></li>
                }
                <li class="page-item"><div class="page-link">Page @(TotalFound == 0 ? 0 : (Search.Page + 1)) of @(Math.Ceiling((double)TotalFound / PageSize))</div></li>
                @if ((Search.Page + 1) < (Math.Ceiling((double)TotalFound / PageSize)))
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchUsers(Search.Page + 1, false))">Next</div></li>
                }
            </ul>
        </nav>
    </div>
</div>
<div class="row mt-1">
    <div class="col-md-12">
        <label class="float-end search-found">Found @TotalFound.ToString("N0")</label>
    </div>
</div>

@code {
    private Search Search { get; set; } = new Search();
    int PageSize { get; set; } = 15;

    List<BlazorTemplate.Common.User> Items = new List<BlazorTemplate.Common.User>();
    int TotalFound { get; set; }

    private Common.SystemSettings SystemSettings { get; set; } = new SystemSettings();

    protected override async Task OnParametersSetAsync()
    {
        await GetSettings();

        var cachedSearch = await localStorage.GetItemAsync<Search>("Usersearch");
        if (cachedSearch == null)
        {
            await SearchUsers(0, true);
        }
        else
        {
            Search = cachedSearch;
            await SearchUsers(Search.Page, false);
        }
    }

    async private Task SearchUsers(int? page, bool reset)
    {
        if (reset == true)
        {
            Search = new Search();
            Search.SortBy = nameof(BlazorTemplate.Common.User.Email);
            page = null;
        }

        Search = new Search()
        {
            FilterText = string.IsNullOrEmpty(Search?.FilterText) ? null : Search?.FilterText,
            Page = page == null ? Search.Page : (int)page,
            PageSize = PageSize,
            SortBy = Search.SortBy,
            SortDirection = Search.SortDirection
        };

        await localStorage.SetItemAsync("Usersearch", Search);
        var response = await API.PostAsync<Common.SearchResponse<Common.User>>($"api/v1/Users", Search);
        if(response != null)
        {
            Items = response.Results;
            TotalFound = response.Total;
        }
    }

    async private Task Sort(string column)
    {
        Search.SortBy = column;
        Search.SortDirection = Search.SortDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;

        await SearchUsers(Search.Page, false);
    }

    async private Task ToggleAdministrator(BlazorTemplate.Common.User user)
    {
        await API.GetAsync($"api/v1/user/{user.Id}");
    }

    async private Task DeleteUser(BlazorTemplate.Common.User user)
    {
        var options = new ModalOptions() 
        { 
            Position = ModalPosition.Middle,
            Size = ModalSize.ExtraLarge,
            Class = "bg-dark text-white modal-custom modal-size-large",
            OverlayCustomClass = "custom-modal-overlay"
        };

        var modal = _modalService.Show<ConfirmDialog>("Are you sure you want to delete this user?", options);
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            var response = await API.DeleteAsync($"api/v1/user/{user.Id}");
            if(response)
                Items.Remove(user);
        }


        
    }

    async private Task GetSettings()
    {
        SystemSettings = await API.GetAsync<Common.SystemSettings>("api/v1/settings");
    }

    async private Task UpdateSettings()
    {
        await API.PutAsync("api/v1/settings", SystemSettings);
        _navigationManger.Refresh(true);
    }
}
