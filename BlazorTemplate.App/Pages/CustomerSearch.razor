@page "/customers"

@using BlazorTemplate.Common

@inject NavigationManager _navigationManger
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BlazorTemplate.App.Services.API API

@attribute [Authorize]

<div class="row">
    <div class="col-md-12">
        <a href="@($"/customer")" class="btn btn-success float-end"><i class="bi bi-plus-lg me-2"></i>Add Customer</a>
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <form class="input-group float-end" @onsubmit="(() => SearchCustomers(0, false))" autocomplete="off">
            <input type="text" class="form-control" aria-label="Text input with dropdown button" @bind="Search.FilterText" autocomplete="off" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="submit"><i class="bi bi-search me-2"></i>Search</button>
            </div>
        </form>
    </div>
</div>
<div class="row mt-1">
    <div class="col-md-12">
        <div class="btn btn-link btn-sm float-end pointer" @onclick="(() => SearchCustomers(0, true))">Reset Search</div>
    </div>
</div>
<div class="row mt-3">
    <div class="col-md-12">
        <nav aria-label="Page navigation example">
            <ul class="pagination float-end">
                @if ((Search.Page + 1) > 1)
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchCustomers(Search.Page - 1, false))">Previous</div></li>
                }
                <li class="page-item"><div class="page-link">Page @(TotalFound == 0 ? 0 : (Search.Page + 1)) of @(Math.Ceiling((double)TotalFound / PageSize))</div></li>
                @if ((Search.Page + 1) < (Math.Ceiling((double)TotalFound / PageSize)))
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchCustomers(Search.Page + 1, false))">Next</div></li>
                }
            </ul>
        </nav>
    </div>
</div>
<div class="row">
    <div class="col-md-12 table-responsive">
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <th width="50%" scope="col" @onclick="(() => Sort(nameof(BlazorTemplate.Common.Customer.Name)))" class="pointer">
                        Name
                        @if (Search.SortBy == nameof(BlazorTemplate.Common.Customer.Name))
                        {
                            @if (Search.SortDirection == SortDirection.Ascending)
                            {
                                <i class="bi bi-chevron-down"></i>
                            }
                            else if (Search.SortDirection == SortDirection.Descending)
                            {
                                <i class="bi bi-chevron-up"></i>
                            }
                        }
                    </th>
                    <th width="20%" scope="col" @onclick="(() => Sort(nameof(BlazorTemplate.Common.Customer.State)))" class="pointer">
                        State
                        @if (Search.SortBy == nameof(BlazorTemplate.Common.Customer.State))
                        {
                            @if (Search.SortDirection == SortDirection.Ascending)
                            {
                                <i class="bi bi-chevron-down"></i>
                            }
                            else if (Search.SortDirection == SortDirection.Descending)
                            {
                                <i class="bi bi-chevron-up"></i>
                            }
                        }
                    </th>
                    <th width="20%" scope="col" @onclick="(() => Sort(nameof(BlazorTemplate.Common.Customer.Active)))" class="pointer">
                        Active
                        @if (Search.SortBy == nameof(BlazorTemplate.Common.Customer.Active))
                        {
                            @if (Search.SortDirection == SortDirection.Ascending)
                            {
                                <i class="bi bi-chevron-down"></i>
                            }
                            else if (Search.SortDirection == SortDirection.Descending)
                            {
                                <i class="bi bi-chevron-up"></i>
                            }
                        }
                    </th>
                    <th width="10%" scope="col" @onclick="(() => Sort(nameof(BlazorTemplate.Common.Customer.Gender)))" class="pointer">
                        Gender
                        @if (Search.SortBy == nameof(BlazorTemplate.Common.Customer.Gender))
                        {
                            @if (Search.SortDirection == SortDirection.Ascending)
                            {
                                <i class="bi bi-chevron-down"></i>
                            }
                            else if (Search.SortDirection == SortDirection.Descending)
                            {
                                <i class="bi bi-chevron-up"></i>
                            }
                        }
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Items)
                {
                    <tr class="pointer">
                        <td><div class="btn btn-link" @onclick="(() => SelectCustomer(item.Id))">@item.Name</div></td>
                        <td class="align-middle">@item.State</td>
                        <td class="align-middle">
                            @if (item.Active)
                            {
                                <i class="bi bi-check-lg green"></i>
                            }
                            else
                            {
                                <i class="bi bi-x-lg red"></i>
                            }
                        </td>
                        <td class="align-middle">
                            @if (item.Gender == Gender.Male)
                            {
                                <i class="bi bi-gender-male me-2"></i>
                            }
                            else if (item.Gender == Gender.Female)
                            {
                                <i class="bi bi-gender-female me-2"></i>
                            }
                            else
                            {
                                @* Field is empty. Nothing here. *@
                            }
                            @item.Gender.GetDescription()
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <nav aria-label="Page navigation example">
            <ul class="pagination float-end">
                @if ((Search.Page + 1) > 1)
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchCustomers(Search.Page - 1, false))">Previous</div></li>
                }
                <li class="page-item"><div class="page-link">Page @(TotalFound == 0 ? 0 : (Search.Page + 1)) of @(Math.Ceiling((double)TotalFound / PageSize))</div></li>
                @if ((Search.Page + 1) < (Math.Ceiling((double)TotalFound / PageSize)))
                {
                    <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchCustomers(Search.Page + 1, false))">Next</div></li>
                }
            </ul>
        </nav>
    </div>
</div>
<div class="row mt-1">
    <div class="col-md-12">
        <label class="float-end search-found">Found @TotalFound.ToString("N0")</label>
    </div>
</div>

@code {
    private Search Search { get; set; } = new Search();
    int PageSize { get; set; } = 15;

    List<BlazorTemplate.Common.Customer> Items = new List<BlazorTemplate.Common.Customer>();
    int TotalFound { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var cachedSearch = await localStorage.GetItemAsync<Search>("CustomerSearch");
        if (cachedSearch == null)
        {
            await SearchCustomers(0, true);
        }
        else
        {
            Search = cachedSearch;
            await SearchCustomers(Search.Page, false);
        }
    }

    async private Task SearchCustomers(int? page, bool reset)
    {
        if (reset == true)
        {
            Search = new Search();
            Search.SortBy = nameof(BlazorTemplate.Common.Customer.Name);
            page = null;
        }

        Search = new Search()
        {
            FilterText = string.IsNullOrEmpty(Search?.FilterText) ? null : Search?.FilterText,
            Page = page == null ? Search.Page : (int)page,
            PageSize = PageSize,
            SortBy = Search.SortBy,
            SortDirection = Search.SortDirection
        };

        await localStorage.SetItemAsync("CustomerSearch", Search);
        var response = await API.PostAsync<Common.SearchResponse<Common.Customer>>($"api/v1/customers", Search);
        if(response != null)
        {
            Items = response.Results;
            TotalFound = response.Total;
        }
    }

    async private Task Sort(string column)
    {
        Search.SortBy = column;
        Search.SortDirection = Search.SortDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;

        await SearchCustomers(Search.Page, false);
    }

    private void SelectCustomer(string customerId)
    {
        _navigationManger.NavigateTo($"customer/{customerId}");
    }
}
